Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"dc1a7709-53ca-4da3-94f3-4e93c34a331a\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/user/static/js/validation.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/user/templates/forgot.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/user/templates/forgot.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/user/templates/signin.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/user/templates/signin.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/user/templates/signup.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/user/templates/signup.html\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2u23Rw7l3n0ETJxfNi1c1Ks0hx6\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;F:/MCA Project/Django/EcomVision-project/EcomVision/user/templates&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"F:\\MCA Project\\Django\\EcomVision-project\\EcomVision\\user\\templates\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"dc1a7709-53ca-4da3-94f3-4e93c34a331a\" name=\"Changes\" comment=\"\" />\r\n      <created>1741432838305</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1741432838305</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 28043e2730a5c36160d95c8fc332e9722eb3dec1)
+++ b/.idea/workspace.xml	(date 1743502189460)
@@ -2,11 +2,10 @@
 <project version="4">
   <component name="ChangeListManager">
     <list default="true" id="dc1a7709-53ca-4da3-94f3-4e93c34a331a" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/user/static/js/validation.js" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/user/templates/forgot.html" beforeDir="false" afterPath="$PROJECT_DIR$/user/templates/forgot.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/user/templates/signin.html" beforeDir="false" afterPath="$PROJECT_DIR$/user/templates/signin.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/user/templates/signup.html" beforeDir="false" afterPath="$PROJECT_DIR$/user/templates/signup.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/user/models.py" beforeDir="false" afterPath="$PROJECT_DIR$/user/models.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/user/templates/home.html" beforeDir="false" afterPath="$PROJECT_DIR$/user/templates/home.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/user/views.py" beforeDir="false" afterPath="$PROJECT_DIR$/user/views.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -48,4 +47,15 @@
     </task>
     <servers />
   </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
 </project>
\ No newline at end of file
Index: user/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\r\nfrom EcomVision import settings\r\nfrom django.contrib import messages\r\nfrom django.utils import timezone\r\nfrom django.http import JsonResponse\r\nfrom django.shortcuts import render, redirect, get_object_or_404\r\nfrom django.views import View\r\nfrom .models import *\r\nimport subprocess\r\nimport os\r\n\r\nfrom user.models import *\r\n\r\n# Create your views here.\r\n\r\n# global variable :-\r\nemail = \"\"\r\n\r\n\r\nclass HomePage(View):\r\n    def get(self, request):\r\n        return render(request, \"home.html\")\r\n\r\nclass SignInPage(View):\r\n    def get(self, request):\r\n        return render(request, \"signin.html\")\r\n\r\n    def post(self, request):\r\n        user_email = request.POST[\"user_email\"]\r\n        user_passwd = request.POST[\"user_passwd\"]\r\n\r\n        print(\"**********\", user_email, \"\\n-*-*-*-\", user_passwd)\r\n\r\n        if user_details.objects.filter(user_email=user_email, user_passwd=user_passwd).exists():\r\n\r\n            try:\r\n                # user_data = user_details.objects.filter(user_email=user_email).first()\r\n\r\n                user_data = get_object_or_404(user_details, user_email=user_email)\r\n                print(\"User Details :- \", user_data)\r\n\r\n                messages.success(request, \"Welcome \"+user_data.user_name)\r\n\r\n                return render(request, \"home.html\", {\"user_data\": user_data})\r\n\r\n            except:\r\n                print(\"--------\", sys.exc_info())\r\n\r\n        else:\r\n            print(\"---------->>> Your Email or Password is incorrect!\")\r\n            messages.error(request, \"Your Email isn't registered or Password is incorrect!\")\r\n            messages.info(request, \"Please try again..\")\r\n            return render(request, \"signin.html\", {\"user_email\": user_email})\r\n\r\n\r\nclass ProfilePage(View):\r\n    def get(self, request):\r\n        userid = request.session.get(\"user_id\")\r\n        if not userid:\r\n            return redirect(\"/signin\")\r\n        else:\r\n            user_data = user_details.objects.get(user_id=userid)\r\n\r\n        return render(request, 'profile.html', {\"user_data\": user_data})\r\n\r\n    def post(self, request):\r\n        user_id = request.session.get(\"user_id\")\r\n\r\n        if not user_id:\r\n            return redirect(\"/signin\")\r\n\r\n        # Get updated data from form\r\n        name = request.POST.get(\"name\")\r\n        email = request.POST.get(\"email\")\r\n\r\n        # Update user details in the database\r\n        user = user_details.objects.get(user_id=user_id)\r\n        user.user_name = name\r\n        user.user_email = email\r\n        user.save()\r\n\r\n        # Update session with new data\r\n        request.session[\"user_name\"] = name\r\n        request.session[\"user_email\"] = email\r\n\r\n        messages.success(request, \"Profile updated successfully!\")\r\n        return redirect(\"/profile\")\r\n\r\n\r\ndef logout_user(request):\r\n    request.session.flush()\r\n    return redirect(\"/\")\r\n\r\nclass SignUpPage(View):\r\n    def get(self, request):\r\n        return render(request, \"signup.html\")\r\n\r\n    def post(self, request):\r\n        user_name = request.POST[\"user_name\"]\r\n        user_email = request.POST[\"user_email\"]\r\n        user_passwd = request.POST[\"user_passwd\"]\r\n        user_c_passwd = request.POST[\"user_c_passwd\"]\r\n        # created_at = timezone.now()\r\n\r\n        print(f\" user_name : {user_name} \\n user_email : {user_email} \\n user_passwd : {user_passwd} \\n user_c_passwd : {user_c_passwd}\")\r\n\r\n        if user_details.objects.filter(user_email=user_email).exists():\r\n            messages.error(request, \"Email already registered!\")\r\n            return render(request, \"signup.html\", {\"user_name\": user_name, \"user_passwd\": user_passwd, \"user_c_passwd\": user_c_passwd})\r\n\r\n        if user_passwd != user_c_passwd:\r\n            print(\"-------- Both password must be same..! --------\")\r\n            messages.info(request, \"Both password must be same..!\")\r\n            return render(request, \"signup.html\", {\"user_name\": user_name, \"user_email\": user_email})\r\n\r\n        user = user_details(user_name=user_name, user_email=user_email, user_passwd=user_passwd)\r\n\r\n        try:\r\n            user.save()\r\n            messages.success(request, \"You are successfully registered...\")\r\n            return render(request, \"signin.html\", {})\r\n\r\n        except:\r\n            print(\"---------\", sys.exc_info())\r\n\r\nclass ForgotPage(View):\r\n    def get(self, request):\r\n        return render(request, \"forgot.html\")\r\n\r\n    def post(self, request):\r\n        user_otp = request.POST[\"user_otp\"]\r\n        user_passwd = request.POST[\"user_passwd\"]\r\n        user_c_passwd = request.POST[\"user_c_passwd\"]\r\n\r\n        user_email = 'pshubham8734@gmail.com'\r\n\r\n        print(\"**********\", user_otp, \"\\n-*-*-*-\", user_passwd, \"\\n-*-*-*-\", user_c_passwd, \"\\n-*-*-*-\", user_email)\r\n\r\n        if user_details.objects.filter(user_email=user_email, user_otp=user_otp).exists():\r\n\r\n            if user_passwd != user_c_passwd:\r\n                print(\"-------- Both password must be same..! --------\")\r\n                messages.info(request, \"Both password must be same..!\")\r\n\r\n                return render(request, \"forgot.html\", {\"visibility\": True, \"user_otp\": user_otp})\r\n\r\n            try:\r\n                user = user_details.objects.filter(user_email=user_email, user_otp=user_otp)\r\n                user.update(user_passwd=user_passwd)\r\n\r\n                print(\"<<--------- Password has been successfully reset... ---------->>\")\r\n                messages.success(request, \"Password has been successfully reset...\")\r\n\r\n                return redirect(\"/signin\")\r\n\r\n            except:\r\n                print(\"--------\", sys.exc_info())\r\n\r\n        else:\r\n            print(\"-------- OTP is incorrect! --------\")\r\n            messages.error(request, \"OTP is incorrect!\")\r\n\r\n        return render(request, \"forgot.html\", {\"visibility\": True, \"user_passwd\": user_passwd, \"user_c_passwd\": user_c_passwd})\r\n\r\n\r\nimport random\r\nfrom django.core.mail import send_mail\r\n\r\nclass Send_otpPage(View):\r\n\r\n    def get(self):\r\n        return redirect(\"/forgot\")\r\n\r\n    def post(self, request):\r\n        otp = random.randint(1000, 9999)\r\n        user_email = request.POST[\"user_email\"]\r\n\r\n        # request.session['temail'] = user_email\r\n        #\r\n        # print(\"Session temail :\", request.session['temail'])\r\n\r\n        if user_details.objects.filter(user_email=user_email).exists():\r\n\r\n            try:\r\n                user = user_details.objects.filter(user_email=user_email)\r\n                user.update(user_otp=str(otp))\r\n\r\n                subject = \"Your EcomVision Portal OTP\"\r\n                message = \"Dear user, you want to reset your password of your EcomVision account. \\n\\n Use OTP: \" + str(otp) + \"\\n\\nNote: Do not share the OTP with anyone else.\"\r\n                email_from = settings.EMAIL_HOST_USER\r\n                recipient_list = [user_email, ]\r\n\r\n                send_mail(subject, message, email_from, recipient_list)\r\n\r\n                print(\"**********\", subject, \"\\n-*-*-*-\", message, \"\\n-*-*-*-\", email_from, \"\\n-*-*-*-\", recipient_list)\r\n\r\n                messages.info(request, \"OTP has been sent to your registered email..!\")\r\n\r\n                return render(request, \"forgot.html\", {\"visibility\": True})\r\n\r\n            except:\r\n                print(\"---------\", sys.exc_info())\r\n                return render(request, \"forgot.html\", {})\r\n\r\n        else:\r\n            messages.error(request, \"Email is not registered!\")\r\n            return render(request, \"forgot.html\", {})\r\n\r\n\r\nclass CategoryPage(View):\r\n    def get(self, request):\r\n        category = categories.objects.all()\r\n        return render(request, \"category.html\", {\"categories\": category})\r\n\r\nclass ProductListPage(View):\r\n    def get(self, request, c_id):\r\n        category = get_object_or_404(categories, category_id=c_id)\r\n        products_list = products.objects.filter(category_id_id = category.category_id)\r\n        return render(request, \"product_list.html\", {\"products\": products_list, \"category\": category})\r\n    \r\nclass ProductDetailsPage(View):\r\n    def get(self, request, c_id, p_id):\r\n        # Fetching Product and Category data\r\n        category = get_object_or_404(categories, category_id = c_id)\r\n        c_name = category.category_name[:-1]\r\n        product_data = get_object_or_404(products, product_id = p_id)\r\n\r\n        print(\"\\n **---- Product_data : \", product_data, \"\\n\")\r\n        \r\n        # Fetching Latest Price\r\n        p_price = product_data.product_price\r\n        if p_price:\r\n            last_date = max(p_price.keys())  # Get the last date\r\n            last_price = p_price[last_date]  # Get the price for the last date\r\n        else:\r\n            last_price = \"N/A\"\r\n            \r\n        # Fetching Data to display in the graphs\r\n        labels = sorted(p_price.keys())\r\n        values = (p_price[date] for date in labels)     \r\n        context = {\"chartLabels\": labels, \"chartValues\": [int(value.replace(',', '')) for value in values], \"c_name\": c_name, \"product_data\": product_data, \"last_price\": last_price, \"category\": category}\r\n        return render(request, \"product_details.html\", context)\r\n       \r\nclass ProductComparisonPage(View):\r\n    def get(self, request):\r\n        category_data = categories.objects.all()\r\n        tv_data = products.objects.filter(category_id = 12)\r\n        laptop_data = products.objects.filter(category_id = 14)\r\n        mobile_data = products.objects.filter(category_id = 13)\r\n        return render(request, \"comparison.html\", {\"category_data\": category_data, \"tv_data\": tv_data, \"laptop_data\": laptop_data, \"mobile_data\": mobile_data})\r\n\r\nclass ScraperPage(View):\r\n    def get(self,request):\r\n        return render(request, \"scraper.html\")\r\n    \r\n    def post(self, request):\r\n        query = request.POST[\"query\"]\r\n\r\n        print(\"\\n ********* query :-\"+query+\"\\n\")\r\n        \r\n        # if not query:\r\n        #     messages.error(request, \"Please Provide Input\")\r\n        #     return redirect(\"/scraper\")\r\n        \r\n        project_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"../ecom_scraper\")\r\n\r\n        # Set environment variables for Django\r\n        env = os.environ.copy()\r\n        env[\"DJANGO_SETTINGS_MODULE\"] = \"EcomVision.settings\"\r\n        env[\"PYTHONPATH\"] = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\n        \r\n        try:\r\n            subprocess.run([\"scrapy\", \"crawl\", \"ecom_spider\", \"-a\", f\"query={query}\"], cwd=project_path, env=env, check=True)\r\n            messages.success(request, f\"Scraping completed for: {query}\")\r\n        except subprocess.CalledProcessError as e:\r\n            messages.error(request, f\"Scrapy encountered an error: {e}\")\r\n        return redirect(\"/\")\r\n\r\n\r\nclass ProfilePage(View):\r\n    def get(self, request):\r\n        userid = request.session.get(\"user_id\")\r\n        if not userid:\r\n            return redirect(\"/signin\")\r\n        else:\r\n            user_data = user_details.objects.get(user_id=userid)\r\n\r\n        return render(request, 'profile.html', {\"user_data\": user_data})\r\n\r\n    def post(self, request):\r\n        user_id = request.session.get(\"user_id\")\r\n\r\n        if not user_id:\r\n            return redirect(\"/signin\")\r\n\r\n        # Get updated data from form\r\n        name = request.POST.get(\"name\")\r\n        email = request.POST.get(\"email\")\r\n\r\n        # Update user details in the database\r\n        user = user_details.objects.get(user_id=user_id)\r\n        user.user_name = name\r\n        user.user_email = email\r\n        user.save()\r\n\r\n        # Update session with new data\r\n        request.session[\"user_name\"] = name\r\n        request.session[\"user_email\"] = email\r\n\r\n        messages.success(request, \"Profile updated successfully!\")\r\n        return redirect(\"/profile\")\r\n\r\n\r\ndef logout_user(request):\r\n    request.session.flush()\r\n    return redirect(\"/\")\r\n\r\nclass PriceTrackPage(View):\r\n\r\n    pass\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user/views.py b/user/views.py
--- a/user/views.py	(revision e58d88f7e2cfaf947daa9ab405a4d3df5ff07402)
+++ b/user/views.py	(date 1743502266679)
@@ -53,43 +53,6 @@
             return render(request, "signin.html", {"user_email": user_email})
 
 
-class ProfilePage(View):
-    def get(self, request):
-        userid = request.session.get("user_id")
-        if not userid:
-            return redirect("/signin")
-        else:
-            user_data = user_details.objects.get(user_id=userid)
-
-        return render(request, 'profile.html', {"user_data": user_data})
-
-    def post(self, request):
-        user_id = request.session.get("user_id")
-
-        if not user_id:
-            return redirect("/signin")
-
-        # Get updated data from form
-        name = request.POST.get("name")
-        email = request.POST.get("email")
-
-        # Update user details in the database
-        user = user_details.objects.get(user_id=user_id)
-        user.user_name = name
-        user.user_email = email
-        user.save()
-
-        # Update session with new data
-        request.session["user_name"] = name
-        request.session["user_email"] = email
-
-        messages.success(request, "Profile updated successfully!")
-        return redirect("/profile")
-
-
-def logout_user(request):
-    request.session.flush()
-    return redirect("/")
 
 class SignUpPage(View):
     def get(self, request):
